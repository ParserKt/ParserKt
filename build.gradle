plugins {
  id "kotlin-multiplatform" version "1.3.70"
  id 'com.github.johnrengelman.shadow' version "5.2.0"
  id "maven-publish"; id("signing")
  id "io.codearte.nexus-staging" version "0.21.2"
  id "org.jetbrains.dokka" version "0.10.1"
}

allprojects {
  group "fun.parser"
  version "2.6"

  apply plugin: "kotlin-multiplatform"
  kotlin { jvm(); js() }

  compileKotlinJs {
    kotlinOptions.outputFile = "$buildDir/js/${project.name}.js"
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
  }

  //// == Stdlib Deps ==
  repositories { jcenter() }
  ext.kotlin = { name -> return "org.jetbrains.kotlin:kotlin-$name:1.3.70" }

  dependencies {
    commonMainImplementation kotlin("stdlib-common")
    jvmMainImplementation kotlin("stdlib")
    jsMainImplementation kotlin("stdlib-js")

    commonTestImplementation kotlin("test-common")
    commonTestImplementation kotlin("test-annotations-common")

    jvmTestImplementation kotlin("test-junit")
    jsTestImplementation kotlin("test-js")
  }
}

//// == Kotlin & Libs ==
dokka {
  outputFormat = "html"
  outputDirectory = "$buildDir/dokka/"
  subProjects = subprojects.asList().collect { it.name }

  impliedPlatforms = ["Common", "js"]
  multiplatform {
    parserKtOpts { targets = ["JVM", "js"]
      includes = []
      samples = []
      sourceLink { path = "/"; url = "https://github.com/ParserKt/ParserKt/tree/master/"; lineSuffix = "#L" }
    }
    jvm {}
    js {}
  }
}

task dokkaJavadocJar(type: Jar, dependsOn: dokka) {
  group = "jar"; classifier = "javadoc"
  from dokka.outputDirectory
}

dependencies {
  commonMainImplementation project("parserkt-util")
}

//// == Publish ==
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task shadowJar(type: ShadowJar, dependsOn: jvmJar) {
  baseName = "ParserKt"
  manifest {}

  allprojects.forEach { from it.jvmJar.archiveFile }
  //configurations = [project.configurations.jvmRuntimeClasspath]
}

def gradleDir = new File(rootProject.projectDir, "gradle")
apply from: new File(gradleDir, "publish.gradle")
